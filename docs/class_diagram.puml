@startuml

package ch.zucchinit.zauction {
    class SpringApplication
    class ZAuctionApplication {
        +main(String[]): void
    }
    "ZAuctionApplication" --> "SpringApplication"

    package Auth {
        interface UserRepository<extends JARepository<User, Long>>
        interface TokenRepository<extends JARepository<Token, Long>>
        class AuthDTO
        class AuthController {
            -userService: UserService
            -tokenService: TokenService
            +register(AuthDTO.UserRegister register): AuthDTO.UserDetails
            +login(AuthDTO.UserLogin login):   AuthDTO.UserDetails
            +logout(): void
            +me(): AuthDTO.UserDetails
        }
        class UserService {
            -getUserDetails(User user): AuthDTO.UserDetails
            +findById(Long id): AuthDTO.UserDetails
            +create(AuthDTO.UserRegister register): AuthDTO.UserDetails
        }
        class TokenService {
            +registerToken(Long userId): void
            +authenticateToken(): boolean
            +unregisterToken(): void
        }

        "AuthController" --> "UserService"
        "AuthController" --> "TokenService"
        "UserService" --> "UserRepository"
        "TokenService" --> "TokenRepository"
    }

    package Category {
        interface CategoryRepository<extends JARepository<Category, Long>> {
            -findByParentIsNull: Category[]
        }
        class CategoryController {
            -categoryService: CategoryService
            +all(): Category[]
        }
        class CategoryService {
            -categoryRepository: CategoryRepository
            +findAll(): Category[]
            +getChildIds(Category category, Long ids[]): Long[]
            +getReverseCategories(Long categoryId): Category[]
        }

        "CategoryController" --> "CategoryService"
        "CategoryService" --> "CategoryRepository"
    }

    package Lot {
        interface LotRepository<extends JARepository<Lot, Long>>
        class LotDTO
        class LotController {
            -lotService: LotService
            +paginate(Integer page, Integer take, Category category, String search): LotDTO.LotPaginatedThumbnail
            +one(Long id): LotDTO.LotDetails
        }
        class LotService {
            -lotRepository: LotRepository
            -categoryService: CategoryService
            +findByPageWithCategoryAndSearch(Integer page, Integer take, Category category, String search): LotDTO.LotPaginatedThumbnail
            +findById(Long id): LotDTO.LotDetails
            {static} isFinished() : Specification<Lot>
            -hasCategoryId(Long id) : Specification<Lot>
            {static} multiFieldSearch(String keyword) : Specification<Lot>
        }

        "LotController" --> "LotService"
        "LotService" --> "LotRepository"
    }

    package Auction {
        interface AuctionRepository<extends JARepository<Auction, Long>>
   }

    package Exceptions {
        exception "ResourceNotFound"
        class "ExceptionsDTO" {}
        class ExceptionsAdvice {
            +resourceNotFoundHandler: void
            +validationErrorHandler : ExceptionsDTO
            +unknownErrorHandler: ExceptionsDTO
        }

        "ResourceNotFound" --> "ExceptionsAdvice"
        "ExceptionsDTO" --> "ExceptionsAdvice"
    }

    package Security {
        class SecurityConfig {
            -AUTHENTICATED_ROUTES: String[]
            -corsConfigurationSource: CorsConfigurationSource
            +securityFilterChain: SecurityFilterChain
        }
    }

    class S3Connector {
        -s3client: s3Client
        +uploadMedias(Long id)
        +getUrls(Long id): String[]
    }
    "LotService" --> "S3Connector"
}

@enduml